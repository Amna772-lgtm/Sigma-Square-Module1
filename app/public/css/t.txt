$primary-color: #f07c0f;
$font-family: Arial, sans-serif;

body {
    font-family: $font-family;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #f5f5f5;
}

.container {
    display: flex;
    flex-direction: column;
    width: 400px;

    &__form-container,
    &__dashboard-container {
        background: rgb(48, 47, 47);
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        text-align: center;
    }

    &--welcome {
        text-align: center;
        background-color: rgb(48, 47, 47);
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
}

.form-container {
    &__title {
        margin-bottom: 20px;
        color: $primary-color;
        text-align: center;
    }

    &__input-group {
        margin-bottom: 15px;
        margin-right: 30px;
        margin-left: 20px;
    }

    &__button {
        width: 20%;
        padding: 10px;
        background-color: $primary-color;
        color: white;
        border: none;
        border-radius: 4px;
        margin-left: 273px;
        cursor: pointer;

        &:hover {
            background-color: darken($primary-color, 10%);
        }
    }
}

.input-group {
    &__label {
        display: block;
        margin-bottom: 5px;
        color: white;
    }

    &__input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    &__error-message {
        color: rgb(255, 0, 0);
        font-size: 15px;
    }
}

.welcome {
    &__title {
        margin: 0 0 10px;
        font-size: 2em;
        color: $primary-color;
    }

    &__message {
        margin: 0;
        font-size: 1.2em;
        color: white;
    }
}

.logout__link {
    display: inline-block;
    margin-top: 20px;
    padding: 10px 20px;
    background-color: $primary-color;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.3s ease;

    &:hover {
        background-color: darken($primary-color, 10%);
    }
}

.dashboard__button {
    padding: 10px 20px;
    background-color: $primary-color;
    color: white;
    border: none;
    border-radius: 4px;
    margin: 10px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;

    &:hover {
        background-color: darken($primary-color, 10%);
    }
}



class Register
{
    private $conn;

    public function __construct()
    {
        $db = new Database();   // Creating an object of the Database class
        $this->conn = $db->conn;
    }

    public function register($name, $email, $password)
    {
        // Hash the password to store in the database
        $hashpwd = password_hash($password, PASSWORD_DEFAULT);

        // SQL statement using prepared statements for inserting data
        $stmt = $this->conn->prepare('INSERT INTO user (name, email, password) VALUES (?, ?, ?)');
        if ($stmt === false) {
            return ['status' => 'error', 'message' => 'Prepare failed: ' . $this->conn->error];
        }

        // Bind parameters to the placeholders
        $stmt->bind_param('sss', $name, $email, $hashpwd);

        // Execute the statement (query)
        if ($stmt->execute()) {
            return ['status' => 'success', 'message' => 'User registered successfully'];
        } else {
            return ['status' => 'error', 'message' => 'Failed to register user: ' . $stmt->error];
        }
    }

    public function isUserExists($email)
    {
        $checkUser = "SELECT email FROM user WHERE email = ? LIMIT 1";
        $stmt = $this->conn->prepare($checkUser);
        if ($stmt === false) {
            return ['status' => 'error', 'message' => 'Prepare failed: ' . $this->conn->error];
        }

        // Bind parameters to the placeholders
        $stmt->bind_param('s', $email);
        $stmt->execute();
        $stmt->store_result();

        // Check number of records
        $exists = $stmt->num_rows > 0;
        return ['status' => 'success', 'exists' => $exists];
    }

    public function login($email, $password)
    {
        // Prepare the SQL statement for login 
        $stmt = $this->conn->prepare('SELECT name, password FROM user WHERE email = ? LIMIT 1');
        if ($stmt === false) {
            return ['status' => 'error', 'message' => 'Prepare failed: ' . $this->conn->error];
        }

        $stmt->bind_param('s', $email);
        $stmt->execute();
        $stmt->store_result();
        $stmt->bind_result($name, $hashedPassword);
        $stmt->fetch();

        // Check if the user exists and verify the password
        if ($stmt->num_rows > 0) {
            if (password_verify($password, $hashedPassword)) {
                return ['status' => 'success', 'message' => 'Login successful', 'name' => $name];
            } else {
                return ['status' => 'error', 'message' => 'Invalid password'];
            }
        } else {
            return ['status' => 'error', 'message' => 'User does not exist'];
        }
    }
}
